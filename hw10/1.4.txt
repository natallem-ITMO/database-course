1.4 BuyFree
start transaction read write isolation level snapshot;
-- В функции после проверки полета и места мы проверяем, что никто не
-- забронировал и не купил это место, а после этого обновляем, используя
-- on conflict. В этом конкретном случае, мы затрем пользователя в null,
-- если, предположим, между проверкой, что билет свободен, кто то другой 
-- выкупит или забронирует билет (пользователь с конкретным id). Таким 
-- образом потеряем информацию о пользователе и времени покупки/бронирования.
-- Рассмотрим аномалию косой записи (и докажем, что в данном 
-- случае она не страшна)
-- Мы меняем только таблицу Tickets (добавляем в нее данные по ключу), и при 
-- реинтеграции изменений, если исходный слепок бд не был изменен, мы 
-- попытаемся вставить по ключу новый билет (на конфликте мы меняем, но в 
-- данном случае конфликтов быть не может,т.к. работает со слепком и до этого 
-- проверили отсуствие записи по этому ключу), и если две такие операции 
-- будут происходить одновременно, то одна из них просто откатиться (т.к. 
-- такой же ключ уже будет) => инвариант таблицы никак не изменится => проблемы 
-- не возникнет (т.к. даже если учитывать, что кто то одновременно с нами 
-- постарается удалить/отменить рейс или поменять число, мы сможешь сказать, 
-- что наше событие бронирования случилось до изменения рейса/места/времени 
-- вылета и тд)